// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/infrastructure/pb/chatNcall.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatNCallServiceClient is the client API for ChatNCallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatNCallServiceClient interface {
	PassUserChat(ctx context.Context, in *RequestUserChat, opts ...grpc.CallOption) (*ResponseUserChat, error)
}

type chatNCallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatNCallServiceClient(cc grpc.ClientConnInterface) ChatNCallServiceClient {
	return &chatNCallServiceClient{cc}
}

func (c *chatNCallServiceClient) PassUserChat(ctx context.Context, in *RequestUserChat, opts ...grpc.CallOption) (*ResponseUserChat, error) {
	out := new(ResponseUserChat)
	err := c.cc.Invoke(ctx, "/chatNcall_proto.ChatNCallService/PassUserChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatNCallServiceServer is the server API for ChatNCallService service.
// All implementations must embed UnimplementedChatNCallServiceServer
// for forward compatibility
type ChatNCallServiceServer interface {
	PassUserChat(context.Context, *RequestUserChat) (*ResponseUserChat, error)
	mustEmbedUnimplementedChatNCallServiceServer()
}

// UnimplementedChatNCallServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatNCallServiceServer struct {
}

func (UnimplementedChatNCallServiceServer) PassUserChat(context.Context, *RequestUserChat) (*ResponseUserChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PassUserChat not implemented")
}
func (UnimplementedChatNCallServiceServer) mustEmbedUnimplementedChatNCallServiceServer() {}

// UnsafeChatNCallServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatNCallServiceServer will
// result in compilation errors.
type UnsafeChatNCallServiceServer interface {
	mustEmbedUnimplementedChatNCallServiceServer()
}

func RegisterChatNCallServiceServer(s grpc.ServiceRegistrar, srv ChatNCallServiceServer) {
	s.RegisterService(&ChatNCallService_ServiceDesc, srv)
}

func _ChatNCallService_PassUserChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatNCallServiceServer).PassUserChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatNcall_proto.ChatNCallService/PassUserChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatNCallServiceServer).PassUserChat(ctx, req.(*RequestUserChat))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatNCallService_ServiceDesc is the grpc.ServiceDesc for ChatNCallService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatNCallService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatNcall_proto.ChatNCallService",
	HandlerType: (*ChatNCallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PassUserChat",
			Handler:    _ChatNCallService_PassUserChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/infrastructure/pb/chatNcall.proto",
}
